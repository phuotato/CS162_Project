void schoolYear::createSchoolYear(short& k)
{
	loadFile();
	std::ofstream fout;
	while (true)
	{
		ShowingList();

		std::cout << "\n"; gotox(mid - 41 / 2);
		std::cout << "Enter new school year (e.g. 2022-2023): \r";

		std::cout << "\n"; gotox(mid - 41 / 2);
		std::cout << "Or press enter to go back:";
		std::string year; getline(std::cin, year);

		if (year.empty())
			return;

		if (!checkCorrectYear(year)) {
			SetColor(7, 12);
			std::cout << "\n\n"; gotox(mid - 29/2);
			std::cout << "Please enter a valid year!";
			SetColor(7, 0);

			Sleep(2000);
			system("cls");
			continue;
		}

		if (checkExistSchoolYear(year) != 0)
		{
			if (year < pTailSchoolYear->getYear()) {
				SetColor(7, 12);
				std::cout << "\n\n"; gotox(mid - 50 / 2);
				std::cout << "This year is not the newest one. Please enter the correct one!";
				SetColor(7, 0);

				Sleep(2000);
				continue;
			}

			fout.open("../Data/SchoolYear/all school year.txt", std::ios::app);
			fout << std::endl;
			fout << year;
			fout.close();

			if (_mkdir(("../Data/SchoolYear/" + year).c_str()) == 0) {
				fout.open("../Data/SchoolYear/" + year + "/all semester.txt", std::ios::app);
				fout.close();

				schoolYear* tmp = new schoolYear(year, nullptr);
				if (!pHeadSchoolYear) {
					pHeadSchoolYear = tmp;
					pTailSchoolYear = tmp;
				}
				else {
					pTailSchoolYear->pNext = tmp;
					pTailSchoolYear = tmp;
				}

				SetColor(7, 2);
				std::cout << "\n\n"; gotox(mid - 20 / 2);
				std::cout << "Created successfully\n";
				SetColor(7, 0);
				k = 0;

				loadingPage();
				return;
			}
		}
		else
		{
			SetColor(7, 12);
			std::cout << "\n\n"; gotox(mid - 50 / 2);
			std::cout << "This school year has already been created. Please enter another school year.";
			SetColor(7, 0);

			Sleep(2000);
		}
	}
}
